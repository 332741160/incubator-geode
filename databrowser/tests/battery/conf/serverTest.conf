INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfireprms.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-testDescription = "Test to start required no of servers and clients,populate the regions data  & for performing and executing queries.";

hydra.Prms-totalTaskTimeSec 			= 600;
hydra.Prms-maxResultWaitSec 			= 650;

//For starting the agent 
hydra.AdminPrms-names				= admin;
hydra.AdminPrms-distributedSystem		= ds;
hydra.AgentPrms-names				= agent1;
hydra.AgentPrms-adminName			= admin;

hydra.BridgePrms-names       	         	= bridge;
//hydra.BridgePrms-notifyBySubscription 		= true;

hydra.CachePrms-names				= bridge edge agent;

hydra.ConfigPrms-cacheConfig      		= bridge;
//hydra.ConfigPrms-regionConfig     		= Portfolio;
hydra.ConfigPrms-bridgeConfig     		= bridge;
hydra.ConfigPrms-agentConfig			= agent;

hydra.GemFirePrms-names				= fcn "hydra.TestConfigFcns.generateNames(\"${A}gemfire\", ${${A}Hosts})" ncf
			                          fcn "hydra.TestConfigFcns.generateNames(\"${B}gemfire\", ${${B}Hosts})" ncf
						  fcn "hydra.TestConfigFcns.generateNames(\"${C}gemfire\", ${${C}Hosts})" ncf;

hydra.GemFirePrms-useLocator			= fcn "hydra.TestConfigFcns.duplicate(\"true\",    ${${A}Hosts})" ncf
                                                  fcn "hydra.TestConfigFcns.duplicate(\"true\",    ${${B}Hosts})" ncf
                                                  fcn "hydra.TestConfigFcns.duplicate(\"false\",    ${${C}Hosts})" ncf;

hydra.GemFirePrms-enableMcast		        = fcn "hydra.TestConfigFcns.duplicate(\"false\",    ${${A}Hosts})" ncf
                                                  fcn "hydra.TestConfigFcns.duplicate(\"false\",    ${${B}Hosts})" ncf   
                                                  fcn "hydra.TestConfigFcns.duplicate(\"false\",    ${${C}Hosts})" ncf;

hydra.GemFirePrms-distributedSystem		= fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${${A}Hosts})" ncf
		                                  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${${B}Hosts})" ncf
					          fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${${C}Hosts})" ncf;


hydra.log.LogPrms-file_logLevel			= fine;
//hydra.GemFirePrms-logLevel              	= fine;
//hydra.HostPrms-hostNames			= fcn "hydra.TestConfigFcns.duplicate(\"halibut\",  ${${A}Hosts})" ncf
//						  fcn "hydra.TestConfigFcns.duplicate(\"halibut\",  ${${B}Hosts})" ncf
//						  fcn "hydra.TestConfigFcns.duplicate(\"halibut\", ${${C}Hosts})" ncf;

hydra.PartitionPrms-names       		= pr1;
hydra.PartitionPrms-redundantCopies 		= 0;

hydra.RegionPrms-names                  	= serverRegion					clientRegion;
hydra.RegionPrms-regionName     		= Portfolio					Portfolio;
hydra.RegionPrms-valueConstraint     		= com.gemstone.databrowser.objects.Portfolio	com.gemstone.databrowser.objects.Portfolio;
hydra.RegionPrms-interestPolicy         	= All						All;
hydra.RegionPrms-scope                  	= default               			local;
hydra.RegionPrms-dataPolicy     		= replicate					normal;
hydra.RegionPrms-partitionName  		= none                  			none;
hydra.RegionPrms-multicastEnabled 		= true                  			false;
hydra.RegionPrms-poolName			= none						edgeDescript;
hydra.RegionPrms-keyConstraint			= java.lang.String      			java.lang.String;
hydra.RegionPrms-statisticsEnabled		= true;

//Pool attributes.
hydra.PoolPrms-names				= edgeDescript;
hydra.PoolPrms-minConnections			= 10;
hydra.PoolPrms-maxConnections			= 50;
hydra.PoolPrms-subscriptionEnabled		= true;
hydra.PoolPrms-threadLocalConnections		= true;
hydra.PoolPrms-readTimeout			= 60000;
hydra.PoolPrms-subscriptionRedundancy		= 0;
hydra.PoolPrms-idleTimeout			= -1;
hydra.PoolPrms-statisticInterval		= 5000;


// For security enabling. 
//hydra.GemFirePrms-securityName		= dummyScheme;
//hydra.GemFirePrms-locatorSecurityName		= dummyScheme;
//hydra.SecurityPrms-names			= dummyScheme ;
//hydra.SecurityPrms-peerAuthInit		= admin.security.DataBrowserAuthInit.create;
//hydra.SecurityPrms-peerAuthenticator		= admin.security.DataBrowserAuthenticator.create ;
//hydra.SecurityPrms-peerExtraProperties	= admin.security.DummyUserPasswordPrms ;
//admin.security.DummyUserPasswordPrms-username	= Gem;
//admin.security.DummyUserPasswordPrms-password	= Gem;
		  
hydra.VmPrms-type                       	= fcn "hydra.TestConfigFcns.duplicate(\"server\",  ${bridgeHosts})" ncf
						  fcn "hydra.TestConfigFcns.duplicate(\"client\",  ${edgeHosts})" ncf;

hydra.VmPrms-extraClassPaths        		= $GEMFIRE/lib/antlr.jar 
						  $GEMFIRE/lib/gemfire.jar
						  $GEMFIRE/lib/commons-logging.jar
                                                  $GEMFIRE/lib/commons-modeler-2.0.jar
						  $GEMFIRE/lib/mx4j.jar
                                                  $GEMFIRE/lib/mx4j-remote.jar
                                                  $GEMFIRE/lib/mx4j-tools.jar
                                                  $GEMFIRE/lib/mail.jar;
                                                                                                
// Server Entities Setup
admin.jmx.RecyclePrms-numberOfEntitiesInRegion 	= 2;
admin.jmx.RecyclePrms-sleepBetweenCycles   	= 120;
admin.jmx.RecyclePrms-edgeCacheConfig		= edge;
admin.jmx.RecyclePrms-edgeRegionConfig		= clientRegion;
//admin.jmx.RecyclePrms-edgeConfig		= edgeDescript;



query.QueryPrms-queryStrings 			= "select distinct * from /Portfolio";
						  //"select * from /Portfolio"
						  //"select * from /Portfolio.values"
						  //"select distinct * from /Portfolio.keySet"
						  //"/Portfolio.size"
						  //"select ID,status from /Portfolio pf"
						  //"select pkid from /Portfolio pf where status ='active'"						  
						  //"select pkid from /Portfolio pf where status ='active' and ID = 50"						  
						  //"select names[1] from /Portfolio where status='active'"
						  //"select secIds[3],ID from pf in /Portfolio where pf.description='Info'"
						  //"select pf from pf in /Portfolio where status = 'active'"
						  //"(select distinct * from /Portfolio where status = 'active').size"	
						  //"SELECT DISTINCT * FROM /Portfolio pf WHERE pf.isActive"
						  //"select distinct pf.pkid from /Portfolio pf"						  
						  //"SELECT DISTINCT * FROM /Portfolio WHERE positions.size = 1"
						  //"SELECT DISTINCT positions FROM /Portfolio WHERE status = 'active'"						  
                                                  //"SELECT DISTINCT pf FROM /Portfolio pf WHERE status = 'active'"						
						  //"SELECT DISTINCT * FROM /Portfolio WHERE ID != 50"
						  //"select distinct posns.country from /Portfolio,positions.values posns where posns.secId = 'A3'"
						  //"IMPORT com.gemstone.databrowser.objects.positions;select distinct posns.mktValue from /Portfolio,positions.values posns TYPE positions where status = 'active'"
						  //"IMPORT com.gemstone.databrowser.objects.positions;SELECT DISTINCT posns.secId FROM /Portfolio,positions.values posns TYPE positions WHERE status = 'active'"			  
						  //"IMPORT com.gemstone.databrowser.objects.positions;SELECT posns.mktValue FROM /Portfolio,(collection<positions>)positions.values posns"
						  //"IMPORT com.gemstone.databrowser.objects.positions;SELECT DISTINCT * FROM /Portfolio,positions.values posEntry where status = 'active'"
						  //"IMPORT com.gemstone.databrowser.objects.positions;SELECT DISTINCT * FROM /Portfolio pf,positions.values posns TYPE positions WHERE posns.mktValue = 99.1 AND (pf.description = 'Info' OR posns.country = 'Indi')"
						  //"SELECT DISTINCT * FROM /Portfolio,positions.values posns WHERE posns.secId ='A3'"
						  //"SELECT DISTINCT * FROM /Portfolio,positions.values posns WHERE posns.secId <>'A3'"
						  //"select distinct posns.secId,posns.country,posns.issuer from /Portfolio,positions.values posns where posns.bondRating = 'medium'"
						  //"select distinct * from /Portfolio,positions.values posns where posns.bondRating ='medium'"
						  //"select distinct posns.bondRating from /Portfolio,positions.values posns where posns.country = 'UK'"
						  //"select distinct * from /Portfolio,positions.values posns where posns.bondRating='medium' or posns.bondRating='low'"						  
					          //"SELECT DISTINCT * FROM /Portfolio WHERE NOT positions.isEmpty" 
						  //"SELECT DISTINCT * FROM /Portfolio WHERE positions.isEmpty" //Returns set of Portfolios with no positions.
						  //"SELECT DISTINCT * FROM /Portfolio pflo,positions.values posns WHERE IS_UNDEFINED(posns.bondRating)"	
						  //"SELECT DISTINCT * FROM /Portfolio pf WHERE pf.isActive"
						  //"SELECT DISTINCT * FROM /Portfolio WHERE NOT(SELECT DISTINCT * FROM positions.values p WHERE p.secId = 'A1').isEmpty"
						  //"SELECT DISTINCT * FROM /Portfolio /* This one is a comment */ WHERE status = 'active'"
						  //"SELECT DISTINCT * FROM /Portfolio WHERE status = 'active'--This is another one line comment"	
						  //"/Portfolio.keys"
						  //"/Portfolio.hashCode"
						  //"select distinct * from /Portfolio where TRUE"
						  //"select distinct * from /Portfolio where 1=1"
  						  //"select distinct port from /Portfolio port where IS_UNDEFINED(UNDEFINED)"
						  //"select distinct * from /Portfolio where ID = NULL"    // returns empty []
						  //"select distinct * from /Portfolio where ID = UNDEFINED"  // returns empty []
						  //"select distinct * from /Portfolio where NULL"   // returns empty []
						  //"select distinct * from /Portfolio where UNDEFINED"   // returns empty []						  
						  //"select distinct * from /Portfolio where 'a'<>'a'"  // empty []
						  //"select distinct port from /Portfolio port, port.positions.values where FALSE" // returns empty []
						  //"select distinct port from /Portfolio port, port.positions.values where UNDEFINED = 1" // returns empty []
						  //"select distinct * from /Portfolio port where IS_DEFINED(TRUE)"
						  //"select distinct * from /Portfolio port where IS_UNDEFINED(ID)"  // returns empty []
						  //"select distinct nvl(NULL, 'foundNull') from /Portfolio" 
						  //"select distinct nvl('notNull', 'foundNull')  = 'notNull' from /Portfolio"
						  //"select distinct nvl('notNull', 'foundNull') from /Portfolio"
					          //"select distinct * from /Portfolio pf where nvl(pf.positions,'foundNull') = 'foundNull'"  // returns empty []
						  //"select distinct nvl(pf.positions, 'inProjection') from /Portfolio pf where nvl(pf.positions,'foundNull') = 'foundNull'"  // returns empty []
						  //"select distinct x.value from /Portfolio.entrySet x where x.value.status = ELEMENT(select distinct p.value from /Portfolio.entrySet p where x.key = p.key).status"
						  //"select distinct p from /Portfolio p,(select distinct * from /Portfolio x, x.positions as myPos) where myPos.value.secId = 'A1'"
						  //"select distinct to_date('06/01/09','dd/mm/yy') from /Portfolio"
						  //"select /Portfolio.size from set(0)"
						  //"(select * from /Portfolio).size"
						  //"select distinct getPositions, getPositions from /Portfolio where TRUE"
						  //"select distinct port.ID, port.pkid, port.getType from /Portfolio port where IS_UNDEFINED(UNDEFINED)"
						  //"select distinct nvl(NULL, 'foundNull')='foundNull', 'dummy Col' from /Portfolio"
						  //"select distinct nvl('notNull', 'foundNull') as NtNul , 'dummy Col' as Dumbo from /Portfolio"
						  //"select distinct nvl(pf.positions, 'inProjection'), 'dummy Col' from /Portfolio pf where nvl(pf.positions,'foundNull') = 'foundNull'"
						  //"select distinct keys, v.key, v.value.ID, v.value.toString from /Portfolio.keys keys, /Portfolio.entrySet v where v.value.toString in (select distinct p.toString from /Portfolio p where p.ID = v.value.ID) and keys = v.key"
						  //"Select distinct ID, positions  from /Portfolio"
						  //"select distinct to_date('01/06/2009 03:848 PM','mm/dd/yyyy hh:sss a') as twoeighty, to_date('02/07/2009','mm/dd/yyyy'), to_date('03/08/1900 00:2753 PM','mm/dd/yyyy hh:ssss a') from /Portfolio"
						  //"select distinct to_date('01/19/2038 03:848 AM','mm/dd/yyyy hh:sss') as twoeighty, to_date('01/19/2038','mm/dd/yyyy'), to_date('12/14/1901 00:2753 AM','mm/dd/yyyy hh:ssss') from /Portfolio"
						  //"select pos.secId from /Portfolio,positions.values pos"
						  //"Select positions  from /Portfolio"
						  //"select positions from /Portfolio pf ,positions where pf.pkid = 'main'"
						  //"SELECT pf.positions FROM /Portfolio pf WHERE pf.ID = 50"
						  //"select positions from /Portfolio pf where pf.pkid = 'main'"
  						  //"select posns.country from /Portfolio pf,positions.values posns where posns.mktValue >30.0"
						  //"select * from /Portfolio where pkid like 'main'"
						  //"select * from /Portfolio pf where pf->description like 'Info'"
						  //"select distinct * from /Portfolio where \"type\" = 'XYZ' and status ='active'"
						  //"SELECT DISTINCT key, entry.value.ID,posnVal.secId FROM /Portfolio.entrySet entry, entry.value.positions.values posnVal WHERE entry.value.\"type\" = 'XYZ' AND posnVal.secId = 'A1'"
						  //"select posns.country from /Portfolio pf,positions.values posns"
 						  //"/Portfolio"
  						  //"SELECT DISTINCT * FROM /Portfolio pflo WHERE IS_UNDEFINED(pflo.status)"
						  //"IMPORT com.gemstone.databrowser.objects.positions;select posns.secId,posns.mktValue from /Portfolio pf,positions.values posns TYPE positions where status = 'active' and pf.description = posns.secLinks"
						  					

						   						  						    						 					          					
						    						  						  						    						  				

THREADGROUP bridgeServer
    totalThreads = ${bridgeHosts}
    totalVMs = ${bridgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", ${bridgeHosts}, true)" ncf;

THREADGROUP agentForDS1
    totalThreads = ${agentHosts}
    totalVMs = ${agentHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"agent\", ${agentHosts}, true)" ncf;

THREADGROUP edge
    totalThreads = ${edgeHosts}
    totalVMs = ${edgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", ${edgeHosts}, true)" ncf;
    

INITTASK  taskClass = admin.jmx.JMXHelper
	  taskMethod = startJMXAgent
	  hydra.ConfigPrms-agentConfig = agent1
	  threadgroups = agentForDS1
          runMode = always
      	  ;

INITTASK  taskClass = com.gemstone.databrowser.CustomDataGenerator
          taskMethod = startServerCache
          threadGroups = bridgeServer	  
          ;
                                      
INITTASK  taskClass = com.gemstone.databrowser.CustomDataGenerator
          taskMethod = populateRegions
          threadGroups = bridgeServer
          ;          

INITTASK  taskClass = com.gemstone.databrowser.CustomDataGenerator
	  taskMethod = startEdgeClient
          threadGroups = edge
          ;	
          
          
INITTASK  taskClass = com.gemstone.databrowser.CustomDataGenerator
	  taskMethod = performAndExecuteQuery
          threadGroups = edge
          ;	
          
TASK  	  taskClass = com.gemstone.databrowser.CustomDataGenerator
          taskMethod = RegionEntryUpdate
          threadGroups = bridgeServer ,edge          
          ;                  

